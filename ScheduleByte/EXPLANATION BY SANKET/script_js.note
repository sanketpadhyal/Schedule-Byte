

🚀 START OF SCRIPT

const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
(📅 This line creates an array of all the days in a week)


const hours = ["7–9 AM", "9–11 AM", "11–1 PM", "1–3 PM", "3–5 PM", "5–7 PM", "7–9 PM", "9–11 PM"];
(⏰ These are your time slots in a day)


const form = document.getElementById("scheduleForm");
(🧾 This grabs the <form> element where input boxes will be added)




🔛 DIVIDE DAYS FOR TWO-COLUMN OUTPUT


const leftDays = ["Monday", "Tuesday", "Wednesday"];
const rightDays = ["Thursday", "Friday", "Saturday", "Sunday"];
(🧩 First 3 days go to the left side, others to the right (in output view))



🔲 CREATE INPUT BOXES DYNAMICALLY

days.forEach(day => {
  hours.forEach(slot => {
(📦 Loop through each day and time slot...)


    const box = document.createElement("div");
    box.className = "schedule-box";
  (🧱 Create a box for that slot and give it a class for styling)


      const inputId = `${day}_${slot}`;
    (🆔 Create a unique ID like "Monday_7–9 AM" for each input)


        box.innerHTML = `<label><strong>${day} ${slot}</strong></label>
                     <input type="text" name="${inputId}" placeholder="e.g. Study / Gaming / Chill" />`;
    (🖊️ Add a label and input field with placeholder text)


        form.appendChild(box);
    (📥 Insert the box into the form)


        const input = box.querySelector("input");
    input.addEventListener("input", () => {
      box.classList.toggle("filled", input.value.trim() !== "");
    });
  (🌟 If the box is filled with text, add a green-glow class)





  ⚙️ OPTIMIZE BUTTON FUNCTIONALITY



  let latestOptimized = { left: "", right: "" };
(📌 Store the result so we can later download it as JPG)


document.getElementById("optimizeBtn").addEventListener("click", () => {
(🖱️ When Optimize Time button is clicked...)


  const formData = new FormData(form);
(📦 Grab all inputs)


  const good = ["study", "read", "math", "project", "revision"];
  const bad = ["scroll", "game", "idle", "nothing"];
  const neutral = ["sleep", "chill", "eat", "rest"];
(🎯 Keywords to classify time as good, bad, or neutral)


  let leftOutput = "", rightOutput = "";
(📄 These will hold final outputs.)


    days.forEach(day => {
    let section = `📅 ${day}\n`;
(🗂️ For each day, start a section.)


    hours.forEach(slot => {
      const key = `${day}_${slot}`;
      const val = (formData.get(key) || "").toLowerCase().trim();
(🔑 Get the user’s input for that time slot)


      if (!val) section += `🔍 ${slot}: [Unfilled] ❓\n`;
(🧐 If input is empty, mark it as "Unfilled")


      else if (good.some(g => val.includes(g))) section += `✅ ${slot}: ${val}\n`;
      else if (bad.some(b => val.includes(b))) section += `⛔ ${slot}: ${val}\n`;
      else if (neutral.some(n => val.includes(n))) section += `🌙 ${slot}: ${val}\n`;
      else section += `🌀 ${slot}: ${val}\n`;
(🧠 Depending on input, show correct emoji with task.)


    });
    section += "\n";
(📥 End that day’s section.)


    if (leftDays.includes(day)) leftOutput += section;
    else rightOutput += section;
  });
(📤 Add it to left or right depending on the day)



  latestOptimized = { left: leftOutput, right: rightOutput };
(📝 Save the result for export)


  document.getElementById("optimizedOutput").innerHTML = `
    <div class="split-output">
      <pre>${leftOutput}</pre>
      <pre>${rightOutput}</pre>
    </div>`;
  document.getElementById("resultSection").classList.remove("hidden");
});
(📊 Show the output on screen in two columns)





🖼️ DOWNLOAD AS JPG FUNCTIONALITY




document.getElementById("downloadJpgBtn").addEventListener("click", () => {
  if (!latestOptimized.left.trim() && !latestOptimized.right.trim()) return;
(🛑 Don't continue if no data)


  const canvas = document.getElementById("jpgCanvas");
  const ctx = canvas.getContext("2d");
  canvas.width = 1400;
  canvas.height = 1800;
(🧾 Set up canvas size)


  ctx.fillStyle = "#111";
  ctx.fillRect(0, 0, canvas.width, canvas.height);
(🖌️ Fill black background)

  ctx.font = "20px Arial";
  ctx.fillStyle = "#00ffff";
  ctx.fillText("📄 ScheduleByte - Optimized Timetable", 40, 50);
(🔤 Draw title text)


  ctx.font = "17px Arial";
  ctx.fillStyle = "#ffffff";
(🖊️ Set text style for rest)


  let yLeft = 90;
  latestOptimized.left.split("\n").forEach(line => {
    ctx.fillText(line, 40, yLeft);
    yLeft += 28;
  });
(🧱 Draw left part)


  let yRight = 90;
  latestOptimized.right.split("\n").forEach(line => {
    ctx.fillText(line, 740, yRight);
    yRight += 28;
  });
(📐 Draw right part)


  const link = document.createElement("a");
  link.download = "ScheduleByte_Optimized.jpg";
  link.href = canvas.toDataURL("image/jpeg");
  link.click();
});
(🔽 Export JPG and trigger download)




🎯 GOAL SUGGESTIONS BUTTON



document.getElementById("goalSuggestionBtn").addEventListener("click", () => {
(📌 When user clicks "Goal Suggestions"...)


  const formData = new FormData(form);
  let empty = 0, study = 0, game = 0, sleep = 0;
(🧮 Counters for each category)


  for (let [_, v] of formData.entries()) {
    v = v.toLowerCase();
    if (!v.trim()) empty++;
    if (v.includes("study")) study++;
    if (v.includes("game") || v.includes("scroll")) game++;
    if (v.includes("sleep")) sleep++;
  }
(📊 Count how many entries fall into each type)



  const total = days.length * hours.length;
  let advice = "🎯 Goal Suggestions:\n\n";
(📃 Start message)


  if (study / total < 0.3) advice += "📘 Increase study blocks.\n";
  else advice += "✅ Study time looks good.\n";
  if (game / total > 0.25) advice += "🎮 Reduce gaming time.\n";
  if (sleep / total < 0.15) advice += "😴 Add more sleep hours.\n";
  if (empty > 0) advice += "🧐 Fill empty slots wisely!\n";

  alert(advice);
});
(📢 Display the advice based on analysis)





📊 PRODUCTIVITY SCORE BUTTON



document.getElementById("productivityBtn").addEventListener("click", () => {
(📊 Start when button is clicked)



  const formData = new FormData(form);
  let good = 0, bad = 0, neutral = 0, empty = 0;
(📈 Initialize counters)


  for (let [_, v] of formData.entries()) {
    v = v.toLowerCase();
    if (!v.trim()) empty++;
    else if (["study", "read", "math", "project", "revision"].some(k => v.includes(k))) good++;
    else if (["scroll", "game", "idle", "nothing"].some(k => v.includes(k))) bad++;
    else if (["sleep", "chill", "eat", "rest"].some(k => v.includes(k))) neutral++;
  }
(📊 Classify each activity and count it)


  const total = days.length * hours.length;
  const score = Math.round((good / total) * 100);
(📊 Final productivity score (out of 100))


  let msg = `📊 Productivity Score:\n\n`;
  msg += `✅ Productive: ${(good / total * 100).toFixed(1)}%\n`;
  msg += `🌙 Neutral: ${(neutral / total * 100).toFixed(1)}%\n`;
  msg += `⛔ Unproductive: ${(bad / total * 100).toFixed(1)}%\n`;
  msg += `🔍 Empty: ${(empty / total * 100).toFixed(1)}%\n\n`;
(📃 Build output message)



  msg += score >= 70 ? "💪 You're using your time well!" :
         score >= 40 ? "⚠️ Try reducing distractions." :
         "❗ Build a more focused routine.";

  alert(msg);
});
(📢 Show custom message based on productivity level)





🎬 LOADER TRANSITION ON PAGE LOAD




window.addEventListener("load", () => {
  setTimeout(() => {
    document.getElementById("loader").remove();
    document.getElementById("mainContent").classList.remove("hidden");
  }, 4000);
});
(⏳ Wait 4 seconds → hide loader → show full UI)





🌙 DARK/LIGHT MODE TOGGLE




document.getElementById("themeToggle").addEventListener("click", () => {
  document.body.classList.toggle("light");
  document.getElementById("themeToggle").textContent =
    document.body.classList.contains("light") ? "🌞" : "🌙";
});
(🌓 Toggle between dark and light modes with icon change)


